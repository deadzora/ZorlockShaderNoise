// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> map;

float Freq;
float Lacunarity;
int Octaves;
float Gain;
float Perturb;
float Sharpness;
float Amplify;
float AltitudeErosion;
float RidgeErosion;
float SlopeErosion;
float PeriodX;
float PeriodY;
int Width;
int Height;
float seedx;
float seedy;
float seedz;
float seedw;



float4 mod289(float4 x)
{
    return x - floor(x * (1.0 / 289)) * 289;
}

float mod289(float x)
{
    return x - floor(x * (1.0 / 289)) * 289;
}

float4 permute(float4 x)
{
    //return mod289(((x * 34) + 1.0) * x);
    return mod289(x * x * 34.0 + x);
}

float permute(float x)
{
    //return mod289(((x * 34) + 1.0) * x);
    return mod289(x * x * 34.0 + x);
}

float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

float taylorInvSqrt(float r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

float4 grad4(float j, float4 ip)
{
    const float4 ones = float4(1.0, 1.0, 1.0, -1.0);
    float4 p;
    float4 s;

    p.xyz = floor(frac(j * ip.xyz) * 7.0) * ip.z - 1.0;
    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);
    s = 1 - step(0.0, p);
    //if (p.x < 0.0){s.x = p.x;}
    //else {s.x = 0.0;}
    //if (p.y < 0.0){s.y = p.y;}
    //else {s.x = 0.0;}
    //if (p.z < 0.0){s.z = p.z;}
    //else {s.z = 0.0;}
    //if (p.w < 0.0){s.w = p.w;}
    //else {s.w = 0.0;}
    //p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; 
    p.xyz -= sign(p.xyz) * (p.w < 0);
    return p;
}

const float f4 = 0.309016994374947451;

float Simplex(float x, float y, float z, float w)
{
    float4 v = float4(x, y, z, w);
    const float4 C = float4(0.138196601125011, 0.276393202250021, 0.414589803375032, -0.447213595499958);

    float4 i = floor(v + dot(v, 0.309016994374947451));
    float4 x0 = v - i + dot(i, C.xxxx);

    float4 i0;
    float3 isX = step(x0.yzw, x0.xxx);
    float3 isY = step(x0.zww, x0.yyz);
    i0.x = isX.x + isX.y + isX.z;
    i0.yzw = 1.0 - isX;
    i0.y += isY.x + isY.y;
    i0.zw += 1.0 - isY.xy;
    i0.z += isY.z;
    i0.w += 1.0 - isY.z;

    float4 i3 = saturate(i0);
    float4 i2 = saturate(i0 - 1.0);
    float4 i1 = saturate(i0 - 2.0);

    float4 x1 = x0 - i1 + C.xxxx;
    float4 x2 = x0 - i2 + C.yyyy;
    float4 x3 = x0 - i3 + C.zzzz;
    float4 x4 = x0 + C.wwww;

    i = mod289(i);
    float j0 = permute(permute(permute(permute(i.w) + i.z) + i.y) + i.x);
    float4 j1 = permute(permute(permute(permute(
        i.w + float4(i1.w, i2.w, i3.w, 1.0))
        + i.z + float4(i1.z, i2.z, i3.z, 1.0))
        + i.y + float4(i1.y, i2.y, i3.y, 1.0))
        + i.x + float4(i1.x, i2.x, i3.x, 1.0));
    float4 ip = float4(0.003401360544217687075, 0.020408163265306122449, 0.142857142857142857143, 0.0);

    float4 p0 = grad4(j0, ip);
    float4 p1 = grad4(j1.x, ip);
    float4 p2 = grad4(j1.y, ip);
    float4 p3 = grad4(j1.z, ip);
    float4 p4 = grad4(j1.w, ip);

    float4 norm = rsqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;
    p4 *= rsqrt(dot(p4, p4));

    float3 m0 = max(0.6 - float3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);
    float2 m1 = max(0.6 - float2(dot(x3, x3), dot(x4, x4)), 0.0);
    m0 = m0 * m0;
    m1 = m1 * m1;
    return 49.0 * (dot(m0 * m0, float3(dot(p0, x0), dot(p1, x1), dot(p2, x2)))
        + dot(m1 * m1, float2(dot(p3, x3), dot(p4, x4))));
}

float4 DerivativeNoise(float4 noise)
{
    float baseNoise = Simplex(noise.x, noise.y, noise.z, noise.w);
    float h = 0.1f;
    float dx = Simplex(noise.x + h, noise.y, noise.z, noise.w) - Simplex(noise.x - h, noise.y, noise.z, noise.w);
    float dy = Simplex(noise.x, noise.y + h, noise.z, noise.w) - Simplex(noise.x, noise.y - h, noise.z, noise.w);
    float dz = Simplex(noise.x, noise.y, noise.z - h, noise.w) - Simplex(noise.x, noise.y, noise.z - h, noise.w);

    return float4(baseNoise, dx, dy, 1);
}



float UberNoise(float x, float y, float z, float w)
{
    float4 Param = float4(x * Freq, y * Freq, z * Freq, w * Freq);
    float4 pos = float4(Param.x * PeriodX, Param.y * PeriodY, 0, 0);

    float value = 0;
    float sum = 0;
    float featNoise = 0;
    float4 noiseValue = DerivativeNoise(pos);
    featNoise = noiseValue.x;
    float ridgeWeight = 1 * featNoise;

    float max1 = 0;
    float amp = 1;
    float cGain = 1;
    int i = 0;

    float3 lDeriv = float3(noiseValue.y, noiseValue.z, noiseValue.w);
    float3 addToPos = lDeriv * Perturb;
    pos.x += addToPos.x;
    pos.y += addToPos.y;
    pos.z += addToPos.z;

    float3 ridgeErosion = float3(0, 0, 0);
    float3 slopeErosion = float3(0, 0, 0);

    while (++i < Octaves)
    {
        max1 += amp * 2 * (cGain * Amplify);
        ridgeErosion += lDeriv * RidgeErosion;
        slopeErosion += lDeriv * SlopeErosion;

        float ridgeNoise1 = (featNoise +.7) * .5;
        float ridgeNoise = ridgeWeight * ridgeNoise1;
        ridgeWeight = 1 * ridgeNoise1;
        float billowNoise = 2 * abs(featNoise)-1;
        featNoise = lerp(featNoise, billowNoise, saturate(Sharpness));
        Sharpness = -1 * Sharpness;
        featNoise = lerp(featNoise, ridgeNoise,  abs(saturate(Sharpness)));
        Sharpness = -1 * Sharpness;

        sum += amp * featNoise * (1 / (1 + sqrt(dot(ridgeErosion, ridgeErosion))));

        float dampedAmp = amp * (1 - (ridgeErosion / (1 * sqrt(dot(ridgeErosion, ridgeErosion)))));
        sum += dampedAmp * featNoise * (1 / (1 * sqrt(dot(slopeErosion,slopeErosion))));
        amp *= lerp(cGain, cGain * lerp(0, 1, sum / max1), AltitudeErosion);

        sum += featNoise * cGain * Amplify;
        cGain = cGain * Gain * Amplify;

        addToPos = lDeriv * Perturb;
        pos.x += addToPos.x;
        pos.y += addToPos.y;
        pos.z += addToPos.z;

        pos.x *= Lacunarity;
        pos.y *= Lacunarity;
        pos.z *= Lacunarity;
        pos.w *= Lacunarity;

        noiseValue = DerivativeNoise(pos);
        featNoise = noiseValue.x;
        lDeriv = float3(noiseValue.y, noiseValue.z, noiseValue.w);

    }
    //value = saturate(sum / max1);
    value = sum / max1;
    //value = normalize(value);

    return value;
}


static const float PI = 3.14159265f;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{



    //TODO: insert actual code here!
    int index = id.x * Width + id.y;

    float x1 = 0;
    float x2 = 2;
    float y1 = 0;
    float y2 = 2;
    float dx = x2 - x1;
    float dy = y2 - y1;

    float s = (id.x / (float)Width + 1);
    float t = (id.y / (float)Height + 1);

    float nx = x1 + cos(s * 2 * PI) * dx / (2 * PI);
    float ny = y1 + cos(t * 2 * PI) * dy / (2 * PI);
    float nz = x1 + sin(s * 2 * PI) * dx / (2 * PI);
    float nw = y1 + sin(t * 2 * PI) * dy / (2 * PI);


    //map[index] = UberNoise(nx + seedx, nz + seedy, ny + seedz, nw + seedw);
    map[index] = UberNoise(id.x * seedx, id.y * seedy, id.x + seedz, id.y + seedw);

}